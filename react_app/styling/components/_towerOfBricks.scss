$towerWidth: 20em;
$towerHeight: 30em;
$mortarWidth: 5%;

.towerOfBricksContainer {
    display: flex;
    position: absolute;
    top: 3.5em;
    width: $towerWidth;
    height: $towerHeight;
    flex-wrap: wrap;
    transition: all 1.4s;
    z-index: 50;
    clip: rect(-8em,$towerWidth,$towerHeight,0px);
    transform-origin: bottom center;

    .real.brick {
        display: block;
        overflow: hidden;
    }

    .brick{

        h2 {
            text-align: center;
            position: absolute;
            width: 100%;
            top: 50%;
            transform: translateY(-50%);
            margin:0;
            a {
                transition: all 1s;
                transition-delay: 0.6s;
            }
        }

        position: relative;
        width: 33% - $mortarWidth;
        height: (1/6)*100%;
        margin: 0 $mortarWidth $mortarWidth 0;
        border-radius: 0.9em;
        background-color: white;
        color: black;

        &:nth-child(4n), &:nth-child(4n+1) {
            width: 67% - $mortarWidth;
        }

        $bricksTotal: 12;
        $rowsTotal: 6;
        @for $brickNum from 1 to $bricksTotal {
            $brickRow: 6 - floor(($bricksTotal - $brickNum)/2);
            // brick 1 ends up with row 12 - 1 = 11, 11/2 = 5.5, floor(5.5) = 5, 6 - 5 = 1
            // brick 2 ends up with row 12 - 2 = 10, 10/2 = 5, floor(5) = 5, 6 - 5 = 1
            // ...
            // brick 11 ends up with row 12 - 11 = 1, 1/2 = 0.5, floor(0.5) = 0, 6 - 0 = 6
            // brick 12 ends up with row 12 - 12 = 0, 0/2 = 0, floor(0) = 0, 6 - 0 = 6

            &:nth-child(#{$brickNum}) {
                animation-name: brickDropInAnimation#{$brickNum};
                animation-delay: (($bricksTotal - $brickNum) * 10.19s) - 90s; 
                animation-duration: (($rowsTotal - $brickRow) * ($rowsTotal - $brickRow) * 0.1s);
                animation-timing-function: ease-in;
                animation-fill-mode: both;
                @include brickDropInAnimation($brickNum, $brickRow);
            }
        }
    }

    .brick a{
        color: #fff;
        opacity: 0;
    }
    left: 50vw;
    top: 12em;
    transform: translateX(-50%) scale(0.5);
    transition: all 1.4s;


    &.homeSetupNotBegun {
        opacity: 0;
    }

    &.homeSetupBegun {
        opacity: 1;
    }

    &.homeLayoutBegun {
        opacity: 1;
    }

    &.homeLayoutComplete {
        .brick {
            a {
                color: #000;
                opacity: 1;
                text-decoration: none;
            }
        }
        left: 100vw;
        transform: translateX(-120%) scale(1);
        transform-origin: top left;
        transition: all 1.4s;
    
        @media screen and (max-width: 900px) {
            transform: translateX(-115%) scale(1);
            top: 4em;
        }
        @media screen and (max-width: 780px) {
            transform: translateX(-100%) scale(1);
        }
    }
   
}

.home.compactWidth .towerOfBricksContainer {
    position: relative;
    top: auto;
    left: 0;
    right: 0;
    transform: scale(1.2);
    padding-left: $mortarWidth/2;
    overflow-x: hidden;
    transform-origin: top center;
    margin: auto;
    margin-top: 2em;

    @media screen and (max-width: 500px) {
        transform: scale(1.1);
    }
    @media screen and (max-width: 400px) {
        transform: scale(1);
    }
}