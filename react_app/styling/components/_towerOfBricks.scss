.compactWidth .transitionContainer {
    position: relative;
}

.towerOfBricksContainer {
    display: flex;
    flex-wrap: wrap;
    position: absolute;
    top: $cloudDistanceFromTopAfterAnimation;
    right: 8vw;
    margin-top: $cloudHeight + 6rem;
    width: $towerWidth;
    height: $towerHeight;
    clip: rect(-8em,($towerWidth + 0.5em),$towerHeight,-0.5em);
    border: 2px yellow solid;

    .compactWidth & {
        position: relative;
        margin: 0 auto;
        left: 0;
        right: 0;
        top: 0;
        animation: none;
        transform: scale(1.4);
        padding-left: $mortarWidth/2;
        transform-origin: top center;
        max-height: $towerHeight;
        overflow-y: hidden;
        padding-top: 2em;
    
        @media screen and (max-width: 500px) {
            transform: scale(1.1);
        }
        @media screen and (max-width: 400px) {
            transform: scale(1);
        }
    }

    &.router-appear-active {
        animation-delay: 0.45s;
        animation: towerOfBricksLocationAfterDrop 1.4s ease $totalBricksDropTime backwards;
    }

    .compactWidth &.router-appear-active {
        animation-delay: 0.45s;
        animation: towerOfBricksLocationAfterDropMobile 1.4s ease $totalBricksDropTime backwards;
    }
    
    &.router-enter {
        animation-delay: 0s;
        animation: awayRightWithOpacity 0.4s ease-in reverse backwards;
    }

    &.router-exit-active {
        transform-origin: top;
        animation: awayRightWithOpacity 0.9s both;
    }

    .compactWidth &.router-exit-active {
        position: absolute;
        top:0;
        width: 20em;
        animation: opacityIn 0.4s ease-in reverse both;
    }
}

.brick{
    position: relative;
    width: 33% - $mortarWidth;
    height: (1/6)*100%;
    margin: 0 $mortarWidth $mortarWidth 0;
    border-radius: 0.9em;
    background-color: white;
    transition: transform 0.3s;

    .emptyhome & {
        @for $brickNum from 1 to $bricksTotal {
            &:nth-child(#{$brickNum}) {
                @include brickDropInAnimation($rowsTotal, $brickNum);
            }
        }
    }

    &:hover {
        transform-origin: center center;
        transform: scale(1.05);
        transition: transform 0.3s;
    }
    &:nth-child(4n), &:nth-child(4n+1) {
        width: 67% - $mortarWidth;
    }        
    &.real {
        display: block;
        overflow: hidden;
        &:hover {
            transform: scale(1.07);
        }
    }
    
    h2 {
        text-align: center;
        position: absolute;
        width: 100%;
        top: 50%;
        transform: translateY(-50%);
        margin:0;
        transition: all 1s;
        transition-delay: 0.6s;
        color: #000000;
        text-decoration: none;
        animation: brickTextAppears 1s ease 0.15s backwards;
        
        .emptyhome & {
            animation: brickTextAppears 1s ease-out ($brickfall-animation-duration - 0.7s) backwards;
        }
        .category & {
            transition: color 0.2s;
            color: #ffffff
        }
    }
}


